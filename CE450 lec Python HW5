

#1

def rpl_all(dict, m, n):
    for key, value in dict.items():
        if value==m:
            dict[key]=n

d = {'f': 2, 'b': 3, 'g': 3, 'xy': 99}
rpl_all (d, 3, 'poof')
print(d == {'f': 2, 'b': 'poof', 'g': 'poof', 'xy': 99})


--------------------------------------------------------------------------------------------------------------------------------


#2

def freq(L):
    res={}
    for i in L:
        if i in res: 
            res[i] += 1
        else: 
            res[i] = 1
    return res
    
dic=freq (['the', 'name', 'of', 'the', 'name', 'of', 'the', 'song'])

for i in dic.items():
    print(i)
    
    
--------------------------------------------------------------------------------------------------------------------------------


#3

def mst_freq(lst):
    res={}
    key=" "
    maxFreq=0
    for i in lst:
        if i in res: 
            res[i] += 1
            if res[i]>=maxFreq:
                key=i
                maxFreq=res[i]
        else: 
            res[i] = 1
            if 1>=maxFreq:
                key=i
                maxFreq=1
    return key
    
lst = [1, 4, 2, 4]
print(mst_freq(lst))  


--------------------------------------------------------------------------------------------------------------------------------


#4

def is_dplc(L):
    res={}
    for i in L:
        if i in res: 
            return True
        else: 
            res[i] = 1
    return False
    
a= [1,2,3,1]    
print(is_dplc(a))


--------------------------------------------------------------------------------------------------------------------------------



#5

#Return dictionary containing the keys common to d0 and d1
def cmn_keys(d0, d1):
    d0Keys=[]
    commonKeys={}
    for k0 in d0.keys():
        d0Keys.append(k0)
        
    for k1 in d1.keys():   
        if k1 in d0Keys:
            commonKeys[k1]=0
            
    return commonKeys
    

Dictionary1 = {'A': 'a', 'B': 'b', 'C': 'c'} 
Dictionary2 = {'A': 'a','C': 'c'} 
print(cmn_keys(Dictionary1,Dictionary2).keys())


--------------------------------------------------------------------------------------------------------------------------------


#6

def bld_successors_tab(tokens):
    dict={}
    for i in range(len(tokens)):
        if tokens[i] in dict: 
            if i==len(tokens)-1:
                dict[tokens[i]].append(tokens[0])
            else:    
                dict[tokens[i]].append(tokens[i+1])
        else: 
            if i==len(tokens)-1:
                dict[tokens[i]]=[tokens[0]]
            else:
                dict[tokens[i]]=[tokens[i+1]]
    return dict
    
text = ['We', 'are', 'learning', 'python', ',', 'it', 'is', 'very', 'powerful', 'and', 'very', 'important', '.']
table = bld_successors_tab (text)
sorted(table)
print(table['very'])
print(table['important'])
print(table['.'])



--------------------------------------------------------------------------------------------------------------------------------



#7

def rm_first_helper(lst,elm,pos):
    if pos>=len(lst):
        return lst
    if lst[pos]==elm:
        del lst[pos]
        return lst
    else:
       return rm_first_helper(lst,elm,pos+1) 

def rm_first (lst, elm):
    if len(lst)==0:
        return lst
        
    return rm_first_helper(lst,elm,0)    
    
print(rm_first ([3, 4] , 3))            
print(rm_first ([3, 4, 3] , 3))   
print(rm_first ([2, 4] , 3))
print(rm_first ([] , 0))   


--------------------------------------------------------------------------------------------------------------------------------



#8

def sort(lst):
    if len(lst)<=1:
        return lst
    else:    
        return [min(lst)]+sort(rm_first(lst,min(lst)))
        
print(sort([6, 2, 5]))   
print(sort([2, 3,1,0]))
print(sort([]))

